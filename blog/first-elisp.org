#+TITLE:       First Elisp Function
#+AUTHOR:      Paul Schorfheide
#+EMAIL:       pschorf2@gmail.com
#+DATE:        2016-02-28 Sun
#+URI:         /blog/%y/%m/%d/first-elisp-function
#+KEYWORDS:    emacs, lisp
#+TAGS:        emacs, programming
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Writing my first Emacs Lisp

* org-store-link
I use [[http://orgmode.org/manual/Capture.html][org-capture]] to keep track of my to-do list, and recently started integrating with mu4e for keeping track of
emails. I cribbed a capture template like
#+begin_src emacs-lisp
  (setq org-capture-templates '(("t" "todo" entry (file+headline "~/todo.org" "Tasks")
                                          "* TODO [#A] %?
   SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\")) %a")))
#+end_src
which uses the "%a" format to store a link to the current file. I had some issues with it occasionally
throwing an error when run in [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]], however, and found the links often were not useful in other files,
since I usually use org-capture to enter a quick to-do item when interrupted working on another task.
First, I wrote a second template which had a link but still ran into occasional mu4e issues, so I decided to write
an elisp function for opening a capture with a link to the current file:
#+begin_src emacs-lisp
  (defun org-capture-link ()
      "Capture with a link"
      (interactive)
      (org-store-link (buffer-file-name))
      (org-capture nil "t")
      (let ((link (plist-get org-store-link-plist ':annotation)))
        (save-excursion
          (newline)
          (insert link))))
#+end_src
Luckily, org-store-link keeps the link in a plist, so it was straightforward to pull out the link and insert it
in the capture buffer. I was surprised how straightforward the entire process was.
